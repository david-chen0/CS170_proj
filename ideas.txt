Ideas:

Find most vital nodes then find most vital edges and return the value from removing those


Could try a randomzied selection after where it selects a random amount of vital nodes to remove, then vital edges, then vital nodes, and so on until no more nodes/edges can be removed or any removal would have no effect on the SPT


When removing nodes/edges, find the shortest s-t path and only try removing nodes/edges along that path, as all other nodes/edges being removed will not affect the shortest s-t path


If shortest path length can no longer be increased between iterations, might have to randomly(or use a heuristic) choose a city/edge to delete so that the next one will decrease shortest path length. 


Far from optimal to always remove nodes first then edges

Brute force method(project is due on 5/3): Initialize a global max. Remove every combination of nodes(that don't contain start or end) and keep a pointer in a list to that combination. For each combination, remove every combination of edges. If any combination has no possibility to reach the global max, prune it. (O((V choose c) * (E choose k)) probably takes two days to run on small inputs)

Try to improve on past outputs(stops working on a problem once time limit is reached)